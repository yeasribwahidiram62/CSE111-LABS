{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP9At1kCMJjiT79yz7rR8wI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z9DjGK_qkpsN","executionInfo":{"status":"ok","timestamp":1708446320435,"user_tz":-360,"elapsed":350,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"0102f806-d5a1-4a09-e051-35058bdea6db"},"outputs":[{"output_type":"stream","name":"stdout","text":["1-------------------------\n","Welcome to ABC Memorial Park\n","2-------------------------\n","Successfully bought a ticket for Bob !\n","Successfully bought a ticket for Henry !\n","Successfully bought a ticket for Alexa !\n","You can't buy more than 3 tickets\n","3-------------------------\n","Amount of tickets: 3\n","Total price: 250 taka\n","4-------------------------\n","Welcome to ABC Memorial Park\n","5-------------------------\n","Successfully bought a ticket for Harry !\n","Successfully bought a ticket for Tomas !\n","6-------------------------\n","Amount of tickets: 2\n","Total price: 200 taka\n"]}],"source":["class Customer:\n","    def __init__(self):\n","        self.ticket= 0\n","        self.price = 0\n","        print(\"Welcome to ABC Memorial Park\")\n","\n","    def buyTicket(self,name,age):\n","        self.name = name\n","        self.age = age\n","        ticket = 0\n","        price = 0\n","        if self.ticket < 3 :\n","            self.ticket += 1\n","            print(\"Successfully bought a ticket for\", self.name,\"!\")\n","            if age>10:\n","                price+=100\n","                self.price+=price\n","            else:\n","                price +=50\n","                self.price +=price\n","        else:\n","            print(\"You can't buy more than 3 tickets\")\n","    def showDetails(self):\n","        print(\"Amount of tickets:\",self.ticket)\n","        print(\"Total price:\" ,self.price, \"taka\" )\n","\n","\n","print('1-------------------------')\n","customer1 = Customer()\n","print('2-------------------------')\n","customer1.buyTicket('Bob', 23)\n","customer1.buyTicket('Henry', 7)\n","customer1.buyTicket('Alexa', 30)\n","customer1.buyTicket('Jonas', 43)\n","print('3-------------------------')\n","customer1.showDetails()\n","print('4-------------------------')\n","customer2 = Customer()\n","print('5-------------------------')\n","customer2.buyTicket('Harry', 60)\n","customer2.buyTicket('Tomas', 28)\n","print('6-------------------------')\n","customer2.showDetails()"]},{"cell_type":"code","source":["class Panda:\n","    def __init__(self,name,gender,age):\n","        self.name = name\n","        self.gender = gender\n","        self.age = age\n","    def sleep(self, hours):\n","        self.hours = hours\n","        if 3<= self.hours <=5:\n","           return f\"{self.name} sleeps {self.hours} and should have Mixed Veggies\"\n","\n","        elif 6 <= self.hours <=8:\n","            return f\"{self.name} sleeps {self.hours} and should have Eggplant and Tofu\"\n","        elif 9 <=self.hours<= 11:\n","            return f\"{self.name} sleeps {self.hours} and should have Broccoli Chicken\"\n","\n","        else:\n","            return f\"{self.name} \\'s duration is unknown thus should have only bamboo leaves\"\n","\n","panda1 = Panda(\"Kunfu\", \"Male\", 5)\n","panda2 = Panda(\"Pan Pan\", \"Female\",3)\n","panda3 = Panda(\"Ming Ming\", \"Female\",8)\n","\n","print(\"{} is a {} Panda Bear who is {} years old\".format(panda1.name,panda1.gender,panda1.age))\n","\n","print(\"{} is a {} Panda Bear who is {} years old\".format(panda2.name,panda2.gender,panda2.age))\n","\n","print(\"{} is a {} Panda Bear who is {} years old\".format(panda3.name,panda3.gender,panda3.age))\n","print(\"===========================\")\n","print(panda2.sleep(10))\n","print(panda1.sleep(4))\n","print(panda3.sleep(13))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Esr5we7xqpOI","executionInfo":{"status":"ok","timestamp":1708419897734,"user_tz":-360,"elapsed":438,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"5a39357d-ace1-47d3-d410-f859867b8b1c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Kunfu is a Male Panda Bear who is 5 years old\n","Pan Pan is a Female Panda Bear who is 3 years old\n","Ming Ming is a Female Panda Bear who is 8 years old\n","===========================\n","Pan Pan sleeps 10 and should have Broccoli Chicken\n","Kunfu sleeps 4 and should have Mixed Veggies\n","Ming Ming 's duration is unknown thus should have only bamboo leaves\n"]}]},{"cell_type":"code","source":["class GreenPhone:\n","    def __init__(self,model,version,cam_num):\n","        self.model = model\n","        self.version = version\n","        self.cam_num = cam_num\n","        self.year=0\n","\n","    def showSpecification(self):\n","\n","        print(\"Phone comapny:\", \"GreenPhone\")\n","        print(\"Model name:\", self.model)\n","        print(\"Android version:\", self.version)\n","        print(\"Number of cameras:\", self.cam_num)\n","\n","    def updatePhone(self):\n","        if \"A\" in self.model and self.year<2:\n","            self.version += 1\n","            self.year+=1\n","            print(f\"Your phone Greenphone {self.model} is upgraded to Android Version: {self.version}\")\n","\n","        elif \"A\" in self.model and self.year>=2:\n","            print(f\"Your phone Greenphone {self.model} is already up to date\")\n","        elif \"M\" in self.model and self.year<3:\n","            self.version += 1\n","            self.year+=1\n","            print(f\"Your phone Greenphone {self.model} is upgraded to Android Version: {self.version}\")\n","        elif \"M\" in self.model and self.year>=3:\n","            print(f\"Your phone Greenphone {self.model} is already upto date\")\n","        elif  \"U\" in self.model and self.year<4:\n","            self.version += 1\n","            self.year += 1\n","            print(f\"Your phone Greenphone {self.model} is upgraded to Android Version: {self.version}\")\n","        elif  \"U\" in self.model and self.year>=4:\n","            self.version += 1\n","            self.year += 1\n","            print(f\"Your phone Greenphone {self.model} is already upto date\")\n","\n","print('1=======================')\n","p1 = GreenPhone('A1', 12, 3)\n","p2 = GreenPhone('M11', 12, 4)\n","p3 = GreenPhone('U20', 12, 5)\n","p1.showSpecification()\n","print('2=======================')\n","p2.showSpecification()\n","print('3=======================')\n","p1.updatePhone()\n","print('4=======================')\n","p1.updatePhone()\n","p2.updatePhone()\n","p3.updatePhone()\n","print('5=======================')\n","p1.updatePhone()\n","p2.updatePhone()\n","p3.updatePhone()\n","print('6=======================')\n","p2.updatePhone()\n","p3.updatePhone()\n","print('7=======================')\n","p1.showSpecification()\n","p3.showSpecification()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W1kzZiFc0I6U","executionInfo":{"status":"ok","timestamp":1708451175143,"user_tz":-360,"elapsed":396,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"ce68cc03-7049-4078-e6fb-72f623d30315"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1=======================\n","Phone comapny: GreenPhone\n","Model name: A1\n","Android version: 12\n","Number of cameras: 3\n","2=======================\n","Phone comapny: GreenPhone\n","Model name: M11\n","Android version: 12\n","Number of cameras: 4\n","3=======================\n","Your phone Greenphone A1 is upgraded to Android Version: 13\n","4=======================\n","Your phone Greenphone A1 is upgraded to Android Version: 14\n","Your phone Greenphone M11 is upgraded to Android Version: 13\n","Your phone Greenphone U20 is upgraded to Android Version: 13\n","5=======================\n","Your phone Greenphone A1 is already up to date\n","Your phone Greenphone M11 is upgraded to Android Version: 14\n","Your phone Greenphone U20 is upgraded to Android Version: 14\n","6=======================\n","Your phone Greenphone M11 is upgraded to Android Version: 15\n","Your phone Greenphone U20 is upgraded to Android Version: 15\n","7=======================\n","Phone comapny: GreenPhone\n","Model name: A1\n","Android version: 14\n","Number of cameras: 3\n","Phone comapny: GreenPhone\n","Model name: U20\n","Android version: 15\n","Number of cameras: 5\n"]}]},{"cell_type":"code","source":["class StudentDatabase :\n","    def __init__(self,name,id):\n","        self.name = name\n","        self.id = id\n","        self.grade = {}\n","\n","    def calculateGPA (self,course,semester) :\n","        point = 0\n","        credit = 0\n","        for i in course:\n","            course_info = i.split(\":\")\n","            course_name = course_info[0]\n","            g_point = float(course_info[1])\n","            point = point + g_point * 3\n","            credit += 3\n","        gpa = point / credit\n","        if semester not in self.grade:\n","            self.grade[semester] = {}\n","        for i in course:\n","            course_tuple = tuple(course.split(':')[0])\n","        self.grade[semester][course_tuple] = round(gpa, 2)\n","        def printDetails(self):\n","            print(f'Name: {self.name}')\n","            print(f'ID: {self.id}')\n","            for semester, courses in self.grade.items():\n","                print(f'Courses taken in {semester}: ')\n","                for course_names, gpa in course.items():\n","                    print(', '.join(course_name))\n","                    print(f'GPA: {gpa}')\n","\n","\n","s1 = StudentDatabase('Pietro', '10101222')\n","s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')\n","s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')\n","print(f'Grades for {s1.name}\\n{s1.grades}')\n","print('---------------------------------')\n","s1.printDetails()\n","s2 = StudentDatabase('Wanda', '10103332')\n","s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')\n","print('---------------------------------')\n","print(f'Grades for {s2.name}\\n{s2.grades}')\n","print('---------------------------------')\n","s2.printDetails()\n","\n","\n"],"metadata":{"id":"ulLGcneXP7ht","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"error","timestamp":1708950244167,"user_tz":-360,"elapsed":475,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"61fce578-b245-4bfd-d352-b499f1059852"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'list' object has no attribute 'split'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-b546b5243845>\u001b[0m in \u001b[0;36m<cell line: 33>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0ms1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStudentDatabase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Pietro'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'10101222'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0ms1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculateGPA\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'CSE230: 4.0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CSE220: 4.0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MAT110: 4.0'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Summer2020'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0ms1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculateGPA\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'CSE250: 3.7'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CSE330: 4.0'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Summer2021'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Grades for {s1.name}\\n{s1.grades}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-b546b5243845>\u001b[0m in \u001b[0;36mcalculateGPA\u001b[0;34m(self, course, semester)\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrade\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msemester\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcourse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0mcourse_tuple\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcourse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m':'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrade\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msemester\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcourse_tuple\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpa\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mprintDetails\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'split'"]}]},{"cell_type":"code","source":["class StudentDatabase:\n","    def __init__(self, name, id):\n","        self.name = name\n","        self.id = id\n","        self.grade = {}\n","\n","    def calculateGPA(self, course, semester):\n","        point = 0\n","        credit = 0\n","        for i in course:\n","            course_info = i.split(\":\")\n","            course_name = course_info[0]\n","            g_point = float(course_info[1])\n","            point += g_point * 3\n","            credit += 3\n","        gpa = point / credit\n","        if semester not in self.grade:\n","            self.grade[semester] = {}\n","        for course in course:\n","            course_tuple = tuple(course.split(':')[0])\n","        self.grade[semester][course_tuple] = round(gpa, 2)\n","\n","    def printDetails(self):\n","        print(f'Name: {self.name}')\n","        print(f'ID: {self.id}')\n","        for semester, courses in self.grade.items():\n","            print(f'Courses taken in {semester}: ')\n","            for course_names, gpa in courses.items():\n","                print(', '.join(course_names))\n","                print(f'CGPA: {gpa}')\n","\n","# Driver code\n","s1 = StudentDatabase('Pietro', '10101222')\n","s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')\n","s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')\n","print(f'Grades for {s1.name}\\n{s1.grade}')\n","print('---------------------------------')\n","s1.printDetails()\n","\n","s2 = StudentDatabase('Wanda', '10103332')\n","s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')\n","print('---------------------------------')\n","print(f'Grades for {s2.name}\\n{s2.grade}')\n","print('---------------------------------')\n","s2.printDetails()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fKMczogjUOax","executionInfo":{"status":"ok","timestamp":1708960228612,"user_tz":-360,"elapsed":6,"user":{"displayName":"YEASRIB WAHID IRAM","userId":"16371894080413467486"}},"outputId":"84a5fe8e-8d1a-4051-a6db-b6fa74b8d1d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Grades for Pietro\n","{'Summer2020': {('M', 'A', 'T', '1', '1', '0'): 4.0}, 'Summer2021': {('C', 'S', 'E', '3', '3', '0'): 3.85}}\n","---------------------------------\n","Name: Pietro\n","ID: 10101222\n","Courses taken in Summer2020: \n","M, A, T, 1, 1, 0\n","CGPA: 4.0\n","Courses taken in Summer2021: \n","C, S, E, 3, 3, 0\n","CGPA: 3.85\n","---------------------------------\n","Grades for Wanda\n","{'Summer2022': {('E', 'N', 'G', '1', '0', '1'): 3.8}}\n","---------------------------------\n","Name: Wanda\n","ID: 10103332\n","Courses taken in Summer2022: \n","E, N, G, 1, 0, 1\n","CGPA: 3.8\n"]}]},{"cell_type":"code","source":["class StudentDatabase:\n","    def __init__(self, name, student_id):\n","        self.name = name\n","        self.student_id = student_id\n","        self.grades = {}\n","\n","    def calculateGPA(self, courses, semester):\n","        grade_points = {\n","            'A+': 4.0, 'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n","            'C+': 2.3, 'C': 2.0, 'C-': 1.7, 'D': 1.0, 'F': 0.0\n","        }\n","        total_credits = 0\n","        total_grade_points = 0\n","\n","        for course in courses:\n","            course_code, grade = course.split(': ')\n","            grade_point = grade_points.get(grade, 0)\n","            total_credits += 3\n","            total_grade_points += grade_point * 3\n","\n","        if semester not in self.grades:\n","            self.grades[semester] = {}\n","\n","        self.grades[semester][tuple([course.split(': ')[0] for course in courses])] = round(total_grade_points / total_credits, 2)\n","\n","    def printDetails(self):\n","        print(f'Name: {self.name}')\n","        print(f'ID: {self.student_id}')\n","        for semester, courses_details in self.grades.items():\n","            print(f'Courses taken in {semester}: ')\n","            for courses, cgpa in courses_details.items():\n","                for course in courses:\n","                    print(course)\n","            print(f'CGPA: {cgpa}')\n","\n","# Driver Code\n","s1 = StudentDatabase('Pietro', '10101222')\n","s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 'Summer2020')\n","s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')\n","print(f'Grades for {s1.name}\\n{s1.grades}')\n","print('---------------------------------')\n","s1.printDetails()\n","s2 = StudentDatabase('Wanda', '10103332')\n","s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 'Summer2022')\n","print('---------------------------------')\n","print(f'Grades for {s2.name}\\n{s2.grades}')\n","print('---------------------------------')\n","s2.printDetails()\n"],"metadata":{"id":"XtBrZ4PNWNGT"},"execution_count":null,"outputs":[]}]}